#include <24FJ32GA002.h>

#use      delay(clock=32000000)
//#build(stack=0x1E00:0x1FFF)


#use      fast_io(A)
#use      fast_io(B)
#word     T2CON=0X0110
#word     CMCON=0X0630 
#word     OCDB=0X02CE
#word     U1RXREG=0X0226
#word     U2RXREG=0X0236
#word     AD1PCFG=0X032C   
#word     U1BRG=0X0228
#word     IFS1=0X0086
#word     U1MODE=0X0220
#word     U1STA=0X0222
#word     U1TXREG=0X0224
#bit      LIBRE1=U1STA.8
#word     U2BRG=0X0238 
#word     U2MODE=0X0230
#word     U2STA=0X0232
#word     U2TXREG=0X0234
#bit      ADDEN2=U1STA.5
#bit      LIBRE2=U2STA.8
#bit      U1OERR=U1STA.1 //BORRABLE 
#bit      U2OERR=U2STA.1 //BORRABLE
#bit      U1FERR=U1STA.2  
#bit      U2FERR=U2STA.2 
#bit      FLAG=IFS1.14
#bit      RIDLE1=U1STA.4
#bit      RIDLE2=U2STA.4
#bit      T2ON=T2CON.15


#define   VISUAL_A             PIN_A0  // 
#define   VISUAL_B             PIN_A1
#define   VISUAL_C             PIN_B0  //VERDE
#define   VISUAL_D             PIN_B1//AMARILLO


#define   RESET_A_ID003        0X01
#define   ACTIVAR_A_ID003      0X02
#define   DESACTIVAR_A_ID003   0X03

//SSSSSSSSSSSSSSSSS


//PPPPP
char MEMORIA_ESTADOS_ID024;
char  SUMA=0;
char  PARITY=0;
char  COMMANDO_A_ID003=0;
char  ARGUMENTO_A_ID003=0;
char  COMMANDO_A_ID024=0;
char  ARGUMENTO_A_ID024=0;
char  ACTIVATE_ID003=0;
char  BUFFER_BILLETES[2]={0X00,0X00};
char FLAGET=0;
char DOSIF=0;
char PERIODO_BILL=0;
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
//CON  CERO PARDAD IMPAR CON UNO PAR
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

void ENVIAR_U1 (char PARIDAD , char DATO)
{int16 CARGA_UTIL=0;int16 DUMY1RX=0;char im; char SUMA=0;char PARITY=0;
// for(im=0;im<8;im++){if(bit_test(DATO,im)){SUMA++;}}
// if(bit_test(SUMA,0)){PARITY=1;}
// else {PARITY=0;}
// PARIDAD=PARITY;
// if(PARIDAD==0){bit_clear(CARGA_UTIL,8);}
// if(PARIDAD==1){bit_set(CARGA_UTIL,8);}
// CARGA_UTIL=CARGA_UTIL+DATO;
// //while(!LIBRE1){restart_wdt();} 
 U1TXREG=DATO;//CARGA_UTIL; 
 //while(!LIBRE1){restart_wdt();} 
 U1OERR=0;
}

//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
//RECUERDE DESHABILITAR LA RECEPCION DE DATOS PA NO PERDER TIEMPO 
//ATENDIENDO INTERRUPCIONES GENERADAS POR SI MISMO
//COMUNICACION CON PC
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

void ENVIAR_U2 (char PARIDAD , char DATO)//CONEXION PC
{int16 CARGA_UTIL=0;int16 DUMY2RX=0;char im; char SUMA=0;char PARITY=0;
// for(im=0;im<8;im++){if(bit_test(DATO,im)){SUMA++;}}
// if(bit_test(SUMA,0)){PARITY=1;}
// else {PARITY=0;}
// PARIDAD=PARITY;
// if(PARIDAD==0){bit_clear(CARGA_UTIL,8);}
// if(PARIDAD==1){bit_set(CARGA_UTIL,8);}
// CARGA_UTIL=CARGA_UTIL+DATO;
 //while(!LIBRE2){restart_wdt();} //PA TRABAJAR CON INTERRUPCIONES
 U2TXREG=DATO;//CARGA_UTIL;
 //while(!LIBRE2){restart_wdt();} 
 U2OERR=0;
}

//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

void CONFIG_PORTS (void)
{
//COMPARADOR
 disable_interrupts(INTR_GLOBAL);
 OCDB=(0b1000000000000000)     ;
 SET_TRIS_A(0b1111111111111100);
 SET_TRIS_B(0b1111111111001100);
 setup_vref(VREF_LOW | 14)     ;
 //setup_adc_ports(sAN4|sAN2)  ;
 AD1PCFG=(0b1111111111111111)  ;
 CMCON=  (0b1111001111110000)  ;//AD1PCFG=
 //COMUNICACION CON MAQUINA
 U1MODE=(0b1000110000000010)   ;//9 BIT 19200 BAUD
 U1BRG=51;//9600(103)-19200(51)
 U1STA= (0b0001011100011111)   ;
     //=(0b0001011100111111)    ;
 //COMUNICACION CON PC
 U2MODE=(0b1000110000000010)   ;
 U2BRG=103;//9600(103)-19200(51)
 U2STA=(0b0001011100011111)    ;
 //CONFIGURANDO UN TIMER

 setup_timer2((TMR_INTERNAL | TMR_DIV_BY_1),0x2FFF);//1 9 CONTEO ESPACIO INTER TRAMA
 setup_timer3((TMR_INTERNAL | TMR_DIV_BY_64),0x9FFA);//64
 setup_timer1((TMR_INTERNAL | TMR_DIV_BY_64),0x38FF);

 output_high(VISUAL_A);
 output_high(VISUAL_B);
 output_high(VISUAL_C);
 output_high(VISUAL_D);

 delay_ms(900);

 output_low(VISUAL_A);
 output_low(VISUAL_B);
 output_low(VISUAL_C);
 output_low(VISUAL_D);

}